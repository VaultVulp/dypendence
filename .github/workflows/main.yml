name: Main

on: [push]

jobs:
  check-and-test:
    runs-on: ubuntu-latest

    env:
      PIPENV_VENV_IN_PROJECT: 1

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.8

    - name: Get pip cache
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile.lock') }}

    - name: Get pipenv cache
      uses: actions/cache@v1
      with:
        path: ~/.cache/pipenv
        key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

    - name: Get venv cache
      uses: actions/cache@v1
      id: cache
      with:
        path: ./.venv
        key: ${{ runner.os }}-venv-${{ hashFiles('**/Pipfile.lock') }}

    - name: Set up environment
      run: |
        git status
        python -m pip install --upgrade pip
        pip install -U poetry

    - name: Install dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        poetry install

    - name: Reformat files
      run: |
        make reformat-files

    - name: Check code style
      run: |
        make check-code-style

    - name: Run tests
      run: |
        make test-report

    - if: always()
      name: Upload pytest report
      uses: actions/upload-artifact@v1
      with:
        name: pytest report
        path: report.html

    - name: Check fixtures
      run: |
        make check-fixtures

    - name: Config git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Commit and push changes
      if: startsWith(github.ref, 'refs/tags/') == false
      run: |
        git commit -a -m "Reformat files" || true
        git push

    - name: Upload badge
      if: github.ref == 'refs/heads/develop'
      run: |
        make make-badge
        poetry run s3cmd -P -s --mime-type=image/svg+xml --host=$MINIO_HOST --host-bucket=$MINIO_HOST --access_key=$MINIO_KEY --secret_key=$MINIO_SECRET --signature-v2 --no-check-certificate --check-hostname put ./coverage.svg s3://coverage/${GITHUB_REPOSITORY}/coverage.svg
      env:
        MINIO_HOST: ${{ secrets.MINIO_HOST }}
        MINIO_KEY: ${{ secrets.MINIO_KEY }}
        MINIO_SECRET: ${{ secrets.MINIO_SECRET }}
